openapi: 3.0.2
info:
  title: ''
  version: ''
paths:
  /api/v1/{id}/:
    get:
      operationId: retrievePerson
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this person.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
          description: ''
      tags:
      - api
    put:
      operationId: updatePerson
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this person.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Person'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Person'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdatePerson
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this person.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Person'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Person'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyPerson
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this person.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/v1/:
    get:
      operationId: listPersons
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
          description: ''
      tags:
      - api
    post:
      operationId: createPerson
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Person'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Person'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
          description: ''
      tags:
      - api
  /api/v1/house/{id}/:
    get:
      operationId: retrieveResidence
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this residence.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Residence'
          description: ''
      tags:
      - api
    put:
      operationId: updateResidence
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this residence.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Residence'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Residence'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Residence'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Residence'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateResidence
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this residence.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Residence'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Residence'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Residence'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Residence'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyResidence
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this residence.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/v1/house/:
    get:
      operationId: listResidences
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Residence'
          description: ''
      tags:
      - api
    post:
      operationId: createResidence
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Residence'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Residence'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Residence'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Residence'
          description: ''
      tags:
      - api
  /api/v1/dj-rest-auth/logout/:
    get:
      operationId: listLogouts
      description: 'Calls Django logout method and delete the Token object

        assigned to the current User object.


        Accepts/Returns nothing.'
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ''
      tags:
      - api
    post:
      operationId: createLogout
      description: 'Calls Django logout method and delete the Token object

        assigned to the current User object.


        Accepts/Returns nothing.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
  /api/v1/dj-rest-auth/user/:
    get:
      operationId: retrieveUserDetails
      description: 'Reads and updates UserModel fields

        Accepts GET, PUT, PATCH methods.


        Default accepted fields: username, first_name, last_name

        Default display fields: pk, username, email, first_name, last_name

        Read-only fields: pk, email


        Returns UserModel fields.'
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
      tags:
      - api
    put:
      operationId: updateUserDetails
      description: 'Reads and updates UserModel fields

        Accepts GET, PUT, PATCH methods.


        Default accepted fields: username, first_name, last_name

        Default display fields: pk, username, email, first_name, last_name

        Read-only fields: pk, email


        Returns UserModel fields.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserDetails'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDetails'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateUserDetails
      description: 'Reads and updates UserModel fields

        Accepts GET, PUT, PATCH methods.


        Default accepted fields: username, first_name, last_name

        Default display fields: pk, username, email, first_name, last_name

        Read-only fields: pk, email


        Returns UserModel fields.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserDetails'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDetails'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
      tags:
      - api
  /api/v1/dj-rest-auth/password/reset/:
    post:
      operationId: createPasswordReset
      description: 'Calls Django Auth PasswordResetForm save method.


        Accepts the following POST parameters: email

        Returns the success/fail message.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordReset'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordReset'
          description: ''
      tags:
      - api
  /api/v1/dj-rest-auth/password/reset/confirm/:
    post:
      operationId: createPasswordResetConfirm
      description: "Password reset e-mail link is confirmed, therefore\nthis resets\
        \ the user's password.\n\nAccepts the following POST parameters: token, uid,\n\
        \    new_password1, new_password2\nReturns the success/fail message."
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetConfirm'
          description: ''
      tags:
      - api
  /api/v1/dj-rest-auth/login/:
    post:
      operationId: createLogin
      description: 'Check the credentials and return the REST Token

        if the credentials are valid and authenticated.

        Calls Django Auth login method to register User ID

        in Django session framework


        Accept the following POST parameters: username, password

        Return the REST Framework Token Object''s key.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
          description: ''
      tags:
      - api
  /api/v1/dj-rest-auth/password/change/:
    post:
      operationId: createPasswordChange
      description: 'Calls Django Auth SetPasswordForm save method.


        Accepts the following POST parameters: new_password1, new_password2

        Returns the success/fail message.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChange'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordChange'
          description: ''
      tags:
      - api
components:
  schemas:
    Person:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
          maxLength: 100
        last_name:
          type: string
          maxLength: 100
        id_number:
          type: string
          maxLength: 13
        contact_number:
          type: string
          maxLength: 200
        gender:
          enum:
          - M
          - F
          type: string
        employment_status:
          enum:
          - U
          - E
          - S
          type: string
        ownership_status:
          enum:
          - O
          - T
          type: string
      required:
      - first_name
      - last_name
      - id_number
      - contact_number
      - gender
      - employment_status
      - ownership_status
    Residence:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        address:
          type: string
        area:
          type: string
          maxLength: 200
        ward_number:
          type: string
          maxLength: 10
        water_meter:
          type: string
          maxLength: 200
        electricity_meter:
          type: string
          maxLength: 200
        owner:
          type: integer
      required:
      - address
      - area
      - ward_number
      - water_meter
      - electricity_meter
      - owner
    UserDetails:
      type: object
      properties:
        pk:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+\z
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - username
    PasswordReset:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PasswordResetConfirm:
      type: object
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
        uid:
          type: string
        token:
          type: string
      required:
      - new_password1
      - new_password2
      - uid
      - token
    Login:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
      - password
    PasswordChange:
      type: object
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
      required:
      - new_password1
      - new_password2
